@using Kanba.Models
@using Kanba.Abstractions
@using MudBlazor
@inject ILeadService LeadService
@inject ICourseService CourseService
@inject MudBlazor.IDialogService DialogService

<MudDialog >
    <DialogContent>
        <MudStack Spacing="8">
        

            <MudTextField @bind-Value="newLead.Name" Label="Ismi (required)" Required="true" />

            <MudSelect T="string" Label="Source (required)" @bind-Value="newLead.SourceString" Required="true" Dense="true">
                @foreach (LeadSource src in Enum.GetValues(typeof(LeadSource)))
                {
                    <MudSelectItem Value="@src.ToString()">@src</MudSelectItem>
                }
            </MudSelect>

            <MudSelect T="Course" Label="Qiziqayotgan kurs (required)" @bind-Value="newLead.InterestedCourse" Required="true" Dense="true">
                @foreach (var course in courses)
                {
                    <MudSelectItem Value="@course">@course.Name</MudSelectItem>
                }
            </MudSelect>

            <MudTextField @bind-Value="newLead.Phone" Label="Telefon raqami (optional)" />

            <MudTextField @bind-Value="newLead.Address" Label="Manzili (optional)" />
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Save">Saqlash</MudButton>
        <MudButton Color="Color.Inherit" Variant="Variant.Text" OnClick="Cancel">Bekor qilish</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    private LeadCreationModel newLead = new LeadCreationModel
        {
            Status = LeadStatus.New,
            CreatedAt = DateTime.Now,
            ModifiedAt = DateTime.Now
        };

    private List<Course> courses = new();

    protected override async Task OnInitializedAsync()
    {
        courses = (await CourseService.GetCoursesAsync()).ToList();
    }

    private async Task Save()
    {
        if (string.IsNullOrWhiteSpace(newLead.Name) ||
            string.IsNullOrWhiteSpace(newLead.SourceString) ||
            newLead.InterestedCourse == null)
        {
            // Agar required maydonlar to'ldirilmagan bo'lsa, saqlanmaydi
            return;
        }

        if (Enum.TryParse<LeadSource>(newLead.SourceString, out var parsedSource))
            newLead.Source = parsedSource;
        else
            newLead.Source = LeadSource.Telegram;

        var lead = new Lead
            {
                Name = newLead.Name,
                Phone = newLead.Phone,
                Source = newLead.Source,
                InterestedCourse = newLead.InterestedCourse,
                Status = LeadStatus.New,
                CreatedAt = DateTime.Now,
                ModifiedAt = DateTime.Now,
                Invisible = false
            };

        MudDialog.Close(DialogResult.Ok(lead));
    }

    private void Cancel() => MudDialog.Close(DialogResult.Cancel());

    public class LeadCreationModel
    {
        public string? Name { get; set; }
        public string SourceString { get; set; } = string.Empty;
        public LeadSource Source { get; set; }
        public Course? InterestedCourse { get; set; }
        public string? Phone { get; set; }
        public string? Address { get; set; }
        public LeadStatus Status { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? ModifiedAt { get; set; }
    }
}
