@page "/"
@using Kanba.Models
@using Kanba.Abstractions
@using System.Text.RegularExpressions
@using MudBlazor

@inject ILeadService LeadService
@inject ICourseService CourseService
@inject IDialogService DialogService


<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="pa-4">
    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="ma-4">
        <MudButton Variant="Variant.Outlined"
                   EndIcon="@Icons.Material.Filled.Add"
                   Color="Color.Tertiary"
                   OnClick="@ShowAddLeadDialog">
            Qo'shish
        </MudButton>
        <MudDateRangePicker T="DateTime"
                            Label="Sanalar"
                            @bind-DateRange="dateRange"
                            Required="true"
                            MaxDateRange="1"
                            MinDateRange="1"
                            Style="width:250px; font-size:small" />

        <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
            <MudTextField T="string"
                          Label="Qidirish"
                          Variant="Variant.Text"
                          Margin="Margin.Dense"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Style="width:200px;"
                          @bind-Value="globalSearchTerm"
                          Immediate="true"
                          DebounceInterval="300"
                          OnDebounceIntervalElapsed="GlobalFilterChanged" />

            <MudSelect T="string" Label="Source" Style="width:150px" @bind-Value="selectedSource" Dense="true"
                       Clearable="true" ClearIcon="@Icons.Material.Filled.Clear">
                @foreach (var src in _allSources)
                {
                    <MudSelectItem Value="@src">@src</MudSelectItem>
                }
            </MudSelect>

            <MudSelect T="string" Label="Course" Style="width:150px" @bind-Value="selectedCourse" Dense="true"
                       Clearable="true" ClearIcon="@Icons.Material.Filled.Clear">
                @foreach (var course in _allCourses)
                {
                    <MudSelectItem Value="@course.Name">@course.Name</MudSelectItem>
                }
            </MudSelect>

    
        </MudStack>
    </MudStack>

    <MudDropContainer T="Lead"
                      Items="@DisplayedLeads"
                      ItemDropped="LeadUpdated"
                      ItemsSelector="@((lead, zoneIdentifier) => IsInColumn(lead, zoneIdentifier))"
                      Class="d-flex flex-nowrap"
                      Style="height: calc(100vh - 200px);">
        <ChildContent>
            @foreach (var column in _columns)
            {
                <MudPaper Elevation="1"
                          Class="pa-2 mx-1 mb-2 d-flex flex-column mud-background-gray rounded-lg"
                          Style="flex: 1 1 0; min-width: 270px;">
                    <MudToolBar Dense="true" Class="py-2">
                        <MudText Typo="Typo.subtitle1" Color="@GetColorForColumn(column)" Class="mr-2">
                            <b>@column</b>
                        </MudText>
                        <MudSpacer />
                        <MudMenu Dense="true" MaxHeight="200">
                            <ActivatorContent>
                                <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" />
                            </ActivatorContent>
                            <ChildContent>
                                <MudMenuItem OnClick="@(() => SortColumnByModifiedAt(column))">
                                    Tartiblash
                                </MudMenuItem>
                            </ChildContent>
                        </MudMenu>
                    </MudToolBar>

                    <MudDropZone T="Lead"
                                 Identifier="@column"
                                 Class="p-2 hide-scrollbar"
                                 AllowReorder="true"
                                 Style="overflow-y:auto; height:calc(100vh - 250px);">
                        <MudVirtualize T="Lead"
                                       Items="@(SortedLeadsForColumn(column).ToList())"
                                       ItemSize="40"
                                       ChildContent="CardTemplate">
                        </MudVirtualize>

                        @if (!DisplayedLeads.Any(lead => IsInColumn(lead, column)))
                        {
                            <MudPaper Class="pa-4 d-flex align-center justify-center" Elevation="0">
                                <MudText Typo="Typo.body2" Class="mud-text-secondary">
                                    Bu ustunda hozircha lead yo'q
                                </MudText>
                            </MudPaper>
                        }
                    </MudDropZone>
                </MudPaper>
            }
        </ChildContent>
    </MudDropContainer>
</MudContainer>


@code {
    private readonly string[] _columns = { "Yangi Lidlar", "Bog'lanilgan", "Kuzatuvda", "Yakuniy Holat" };

    private Dictionary<string, bool> _showInvisible = new();
    private Dictionary<string, bool> _sortAscByColumn = new();
    private List<Lead> leads = new();

    private string globalSearchTerm = "";
    private string selectedSource = "";
    private string selectedCourse = "";

    private List<string> _allSources = new() { "Telegram", "Instagram", "Referral" };
    private List<Course> _allCourses = new();

    private RenderFragment<Lead> CardTemplate => lead => @<MudCard Class="ma-3 rounded-lg"
                                                                       Elevation="1"
                                                                       Style="cursor: pointer; background-color: #333;"
                                                                       @onclick="@(() => ShowLeadDetails(lead))">
        <MudCardHeader Style="padding:5px; display: flex; justify-content: space-between; align-items: center; gap: 10px;">
            <CardHeaderContent>
                <MudText Typo="Typo.h6" Style="align-items: center;">
                    
                    @(lead.Name?.Substring(0, Math.Min(lead.Name?.Length ?? 0, 15)))
                </MudText>
            </CardHeaderContent>
            <CardHeaderAvatar>
                <div @onclick:stopPropagation>
                    <MudMenu Dense="true" MaxHeight="200">
                        <ActivatorContent>
                            <MudChip T="string"
                                     Variant="Variant.Text"
                                     Color="@GetColorForStatus(lead.Status)"
                                     Size="Size.Small">
                                @TranslateStatus(lead.Status)
                            </MudChip>
                        </ActivatorContent>
                        <ChildContent>
                            @foreach (LeadStatus status in Enum.GetValues(typeof(LeadStatus)))
                            {
                                <MudMenuItem OnClick="@(() => UpdateLeadStatus(lead, status))">
                                    @TranslateStatus(status)
                                </MudMenuItem>
                            }
                        </ChildContent>
                    </MudMenu>
                </div>
            </CardHeaderAvatar>
        </MudCardHeader>

        <MudCardContent Style="padding-top:8px;">
            <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                <MudIcon Icon="@Icons.Material.Rounded.LocalPhone" Color="Color.Info" />
                <MudText>@FormatPhoneNumber(lead.Phone)</MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>
    ;

    private bool IsVisibleByFilter(Lead lead)
    {
        if (!string.IsNullOrWhiteSpace(globalSearchTerm))
        {
            if (!(lead.Name?.Contains(globalSearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) &&
                !(lead.Phone?.Contains(globalSearchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
            {
                return false;
            }
        }

        if (!string.IsNullOrEmpty(selectedSource) &&
            !lead.Source.ToString().Equals(selectedSource, StringComparison.OrdinalIgnoreCase))
        {
            return false;
        }

        if (!string.IsNullOrEmpty(selectedCourse) &&
            (lead.InterestedCourse == null || !lead.InterestedCourse.Name.Equals(selectedCourse, StringComparison.OrdinalIgnoreCase)))
        {
            return false;
        }

        if (dateRange != null)
        {
            var leadDate = lead.ModifiedAt;
            if (leadDate <= dateRange.Start || leadDate >= dateRange.End.Value.AddDays(1))
            {
                return false;
            }
        }

        return true;
    }


    private void GlobalFilterChanged() => StateHasChanged();
    private DateRange? dateRange = new DateRange
        {
            Start = DateTime.Now.AddDays(-7), 
            End = DateTime.Now 
        };

    protected override async Task OnInitializedAsync()
    {
        leads = (await LeadService.GetLeadsAsync())
            .OrderByDescending(l => l.ModifiedAt)
            .ToList();

        foreach (var col in _columns)
        {
            _showInvisible[col] = false;
            _sortAscByColumn[col] = false;  
        }
        _allCourses = (await CourseService.GetCoursesAsync()).ToList();

    }


    private IEnumerable<Lead> DisplayedLeads => leads.Where(x => IsVisibleByFilter(x));

    private IEnumerable<Lead> SortedLeadsForColumn(string column)
    {
        var columnLeads = DisplayedLeads.Where(lead => IsInColumn(lead, column));
        if (_sortAscByColumn.TryGetValue(column, out bool asc) && asc)
            return columnLeads.OrderBy(l => l.ModifiedAt);
        else
            return columnLeads.OrderByDescending(l => l.ModifiedAt);
    }

    private bool IsInColumn(Lead lead, string zoneIdentifier)
    {
        return GetColumnForStatus(lead.Status) == zoneIdentifier;
    }


    private void ToggleVisibility(string column, bool value)
    {
        _showInvisible[column] = value;
        StateHasChanged();
    }

    private async Task LeadUpdated(MudItemDropInfo<Lead> dropInfo)
    {
        if (dropInfo.Item is not null)
        {
            dropInfo.Item.Status = GetStatusForColumn(dropInfo.DropzoneIdentifier);
            dropInfo.Item.ModifiedAt = DateTime.Now;
            await LeadService.UpdateLeadAsync(dropInfo.Item);
            leads = leads.OrderByDescending(l => l.ModifiedAt).ToList();
            StateHasChanged();
        }
    }

    private void SortColumnByModifiedAt(string column)
    {
        _sortAscByColumn[column] = !_sortAscByColumn[column];
        StateHasChanged();
    }

    private async Task UpdateLeadStatus(Lead lead, LeadStatus newStatus)
    {
        lead.Status = newStatus;
        lead.ModifiedAt = DateTime.Now;
        await LeadService.UpdateLeadAsync(lead);
        leads = leads.OrderByDescending(l => l.ModifiedAt).ToList();
        StateHasChanged();
    }

    private LeadStatus GetStatusForColumn(string column) => column switch
    {
        "Yangi Lidlar" => LeadStatus.New,
        "Bog'lanilgan" => LeadStatus.Contacted,
        "Kuzatuvda" => LeadStatus.Recontact,
        "Yakuniy Holat" => LeadStatus.Acquired,
        _ => LeadStatus.New
    };

    private string GetColumnForStatus(LeadStatus status) => status switch
    {
        LeadStatus.New => "Yangi Lidlar",
        LeadStatus.Contacted or LeadStatus.Phone => "Bog'lanilgan",
        LeadStatus.Recontact or LeadStatus.Registered or LeadStatus.AttendedTrialLesson => "Kuzatuvda",
        LeadStatus.Acquired or LeadStatus.NotAcquired or LeadStatus.Lost => "Yakuniy Holat",
        _ => "Yangi Lidlar"
    };

    private string TranslateStatus(LeadStatus status) => status switch
    {
        LeadStatus.New => "Yangi",
        LeadStatus.Phone => "Telefon qilingan",
        LeadStatus.Contacted => "Bog'langan",
        LeadStatus.Recontact => "Qayta bog'langan",
        LeadStatus.Incomplete => "Tugallanmagan",
        LeadStatus.Registered => "Ro'yxatdan o'tgan",
        LeadStatus.AttendedTrialLesson => "Sinov darsida qatnashgan",
        LeadStatus.Acquired => "Qabul qilingan",
        LeadStatus.NotAcquired => "Qabul qilinmagan",
        LeadStatus.Lost => "Yo'qotilgan",
        _ => "Yangi"
    };

    private async void ShowAddLeadDialog()
    {
        var dialog = DialogService.Show<AddNewLeadDialog>("Yangi Lead");
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is Lead newLead)
        {
            leads.Add(newLead);
            leads = leads.OrderByDescending(l => l.ModifiedAt).ToList();
            StateHasChanged();
        }
    }

    private void ShowLeadDetails(Lead lead)
    {
        var parameters = new DialogParameters { ["Lead"] = lead };
        DialogService.Show<LeadDetailsDialog>("Lead Details", parameters);
    }

    private Color GetColorForColumn(string column) => column switch
    {
        "Yangi Lidlar" => Color.Info,
        "Bog'lanilgan" => Color.Warning,
        "Kuzatuvda" => Color.Secondary,
        "Yakuniy Holat" => Color.Success,
        _ => Color.Default
    };

    private Color GetColorForStatus(LeadStatus status) => status switch
    {
        LeadStatus.New => Color.Info,
        LeadStatus.Phone => Color.Warning,
        LeadStatus.Contacted => Color.Primary,
        LeadStatus.Recontact => Color.Secondary,
        LeadStatus.Incomplete => Color.Error,
        LeadStatus.Registered => Color.Success,
        LeadStatus.AttendedTrialLesson => Color.Tertiary,
        LeadStatus.Acquired => Color.Success,
        LeadStatus.NotAcquired => Color.Error,
        LeadStatus.Lost => Color.Dark,
        _ => Color.Default
    };

    public static string FormatPhoneNumber(string? input)
    {
        if (string.IsNullOrEmpty(input))
            return string.Empty;
        var regex = new Regex(@"(\d{2})[\s\-]?(\d{3})[\s\-]?(\d{4})");
        var result = regex.Replace(input, "$1 $2 $3");
        return result == input ? input : result;
    }
}
